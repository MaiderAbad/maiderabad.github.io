[{"content":"","date":"28 January 2023","permalink":"/tags/container-image/","section":"Tags","summary":"","title":"container image"},{"content":"","date":"28 January 2023","permalink":"/tags/containerized-environment/","section":"Tags","summary":"","title":"containerized environment"},{"content":"","date":"28 January 2023","permalink":"/tags/deployment-process/","section":"Tags","summary":"","title":"deployment process"},{"content":"","date":"28 January 2023","permalink":"/tags/development-workflow/","section":"Tags","summary":"","title":"development workflow"},{"content":"","date":"28 January 2023","permalink":"/tags/docker/","section":"Tags","summary":"","title":"docker"},{"content":"","date":"28 January 2023","permalink":"/tags/dockerfile/","section":"Tags","summary":"","title":"dockerfile"},{"content":" In this post I am going to give you a brief introduction to learn how to use Docker. This post we are using:\nUbuntu 20.04 LTS (Focal Fossa): It\u0026rsquo;s a Long-Term Support version released in April 2020 and it will be supported until April 2025 by Ubuntu. What is Docker? ‚úèÔ∏è # Docker is a powerful tool that allows developers to easily create, deploy, and run applications in a containerized environment. Containers are lightweight, portable, and provide a consistent environment for applications to run in, regardless of the underlying infrastructure.\nConcepts we will be covering in this post:\nGet started with Docker Create a container image Container management Share container images Other commands Setting up Docker üîß # To get started with Docker, you first need to install it on your system. You can download the installer for your operating system from the Docker website.\nTo download and install Docker, you can use the following commands:\n# Update the apt package index sudo apt-get update # Install packages to allow apt to use a repository over HTTPS sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common # Add Docker\u0026#39;s official GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - # Verify the fingerprint of the key sudo apt-key fingerprint 0EBFCD88 # Add the stable repository sudo add-apt-repository \\ \u0026#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\u0026#34; # Update the apt package index sudo apt-get update # Install the latest version of Docker CE sudo apt-get install docker-ce docker-ce-cli containerd.io This code is for Ubuntu systems, if you are using a different operating system, you will need to adjust the commands accordingly.\nNote that you need to run the commands with root or using sudo.\nOnce installed, you can check that Docker is running correctly by running the command docker info or you can also use this command to verify that Docker is installed correctly and running\nsudo docker run hello-world It will download the \u0026ldquo;hello-world\u0026rdquo; image from the docker hub and run it in a container.\nCreate container image üåå # The next step is to create a container image. A container image is a lightweight, standalone, executable package that contains everything needed to run a piece of software, including the code, runtime, system tools, libraries, and settings. You can create a container image by writing a Dockerfile, which is a script that contains instructions for building the image.\nDockerfile example üìÑ # Here is an example Dockerfile that creates an image for a simple web server written in Python:\n# Use an official Python runtime as the base image FROM python:3.9-slim-buster # Set the working directory in the container WORKDIR /app # Copy the requirements file into the container COPY requirements.txt . # Install the required packages RUN pip install --no-cache-dir -r requirements.txt # Copy the application code into the container COPY app.py . # Expose port 5000 for the web server to listen on EXPOSE 5000 # Run the command to start the web server CMD [\u0026#34;python\u0026#34;, \u0026#34;app.py\u0026#34;] To build the image, you can run the following command:\ndocker build -t my-web-server . This command will use the Dockerfile in the current directory (indicated by the . at the end of the command) to build the image, and give it the tag \u0026ldquo;my-web-server\u0026rdquo;.\nThe FROM instruction sets the base image, in this case is python 3.9.\nThe WORKDIR instruction sets the working directory in the container.\nThe COPY instruction copies files from the host into the container.\nThe RUN instruction runs a command in the container.\nThe EXPOSE instruction informs Docker that the container listens on the specified network ports at runtime.\nThe CMD instruction specifies the command to be run when a container is started from the image.\nYou can run the container using the following command:\ndocker run -p 5000:5000 my-web-server This command will create and start a new container using the my-web-server image, and map port 5000 on the host to port 5000 in the container.\nYou can use a .dockerignore file to specify files and directories that should be ignored when building the image.\nYou can check more detail information of the instructions that you can use in a Dockerfile in the Docker documentation.\nContainer management üíª # Once you have an image, you can use the docker run command to start a container. The docker run command takes the image and creates a new container from it. You can use the -d option to run the container in detached mode, which means it will run in the background and you can continue to use the command line.\nTo manage your containers, you can use the docker ps command to see a list of running containers. You can use the docker stop command to stop a container, and the docker start command to start it again.\nYou can also use the docker logs command to see the logs of a container, and the docker exec command to run a command inside a running container.\nShare containers üöÄ # To share your container images with others, you can push them to a container registry, such as Docker Hub. You can use the docker push command to push an image to a registry, and the docker pull command to pull an image from a registry.\nOther commands üëæ # After creating dockerfile you can build the image using: docker build --platform linux/x86_64 -t image_name:latest ./ Save image (it will save it as .tarfile): docker save -o name.tar image_name:latest or docker export -o name.tar image_name:latest To download docker image in local machine: docker load \u0026lt; name.tar or docker import \u0026lt; name.tar To access and navigate in docker container: docker exec -it mycontainer /bin/bash Navigate in docker image: docker run -it myimage /bin/bash Remove image from terminal: docker rmi img_name Stop and remove container: docker stop container_name \u0026amp; docker rm container_name Remove all build cache: docker builder prune Conclusions üí° # In conclusion, Docker is a powerful tool that allows developers to easily create, deploy, and run applications in a containerized environment. It makes it easy to manage, deploy and share your applications. By learning how to use Docker, you can improve the efficiency and portability of your development workflow and streamline your deployment process.\nReferences üìö # Docker documentation ","date":"28 January 2023","permalink":"/posts/introduction-to-docker/","section":"Posts","summary":"Learn how to use Docker.","title":"Dockerizing your projects"},{"content":"","date":"28 January 2023","permalink":"/","section":"Maider Abad","summary":"","title":"Maider Abad"},{"content":"","date":"28 January 2023","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"28 January 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":" Hi üëã\nI\u0026rsquo;m Maider ‚ÄúTell me and I forget, teach me and I may remember, involve me and I learn.‚Äù - Benjamin Franklin üß¨ About me # I am fascinated by combining disciplines to provide an integrated and complete solution. Probably for that reason, I decided to study Biomedical Engineering, which allowed me to merge the more technical parts of engineering and medicine. In the last year of my degree and after my stay at Great Ormond Street Hospital for Children, I decided to specialize in imaging and artificial intelligence. Therefore, after completing my master\u0026rsquo;s degree, I decided to pursue a Ph.D. in computer vision to diagnose diseases by analyzing medical images. I consider myself a hard-working person with time management skills since I have always combined studies with work. I hold a cheerful, proactive, and decisive personality that easily adapts to different environments.\nüåç I was born in Bilbao and currently live in Barcelona, Spain\nüëæ Skills # Machine Learning AI Python Shell Scripting MySQL MatLab R Computer Vision TensorFlow Keras PyTorch Docker NumPy Pandas OpenCV matplotlib scikit-learn Git Download CV Feel free to contact me via email ‚úâÔ∏è ","date":"1 January 0001","permalink":"/about/","section":"Maider Abad","summary":"About me","title":"About"}]